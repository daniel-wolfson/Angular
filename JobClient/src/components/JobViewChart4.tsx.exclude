import React from "react";
import Chart from "react-google-charts";

interface IProps {}

export interface IState {
  data: (string | number)[][];
  options: {};
}

export class JobViewChart4 extends React.Component<IProps, IState> {
  chartEvents = [
    {
      eventName: "select",
      callback({ chartWrapper }: any) {
        console.log("Selected ", chartWrapper.getChart().getSelection());
      },
    },
  ];

  constructor(props: IProps) {
    super(props);

    this.state = {
      data: new Array<[]>(),
      options: {},
    };
  }

  componentDidMount() {
    var options = {
      title: "Comulative job views vs. prediction",
      vAxis: { title: "Job views" },
      hAxis: { title: "Jobs" },
      seriesType: "bars",
      series: { 1: { type: "line" }, 2: { type: "line" } },
      legend: { position: "bottom" },
      colors: ["limegreen"]
    }
    var data = [
      [
        "Days",
        "Active jobs",
        "Jobs views",
        "Predicted job views",
      ],
      ["05", 165, 938, 938],
      ["06", 135, 1120, 1120],
      ["07", 157, 1167, 1167],
      ["08", 139, 1110, 1110],
      ["09", 136, 6916, 6916],
    ];
    // var data1 = [
    //   ["Age", "Weight"],
    //   [8, 12], [4, 5.5], [11, 14], [4, 5], [3, 3.5], [6.5, 7],
    // ];

    this.setState({
      data: data,
      options: options,
    });
  }

  render() {
    return (
      <div style={{ display: "flex" }}>
        <Chart
          width={'100%'}
          chartType="LineChart"
          loader={<div>Loading Chart</div>}
          data={[
            ['Date', 'Value'],
            [new Date(1996, 1, 1), 2000 * Math.random()],
            [new Date(1997, 1, 1), 2000 * Math.random()],
            [new Date(1998, 1, 1), 2000 * Math.random()],
            [new Date(1999, 1, 1), 2000 * Math.random()],
            [new Date(2000, 1, 1), 2000 * Math.random()],
            [new Date(2001, 1, 1), 2000 * Math.random()],
            [new Date(2002, 1, 1), 2000 * Math.random()],
            [new Date(2003, 1, 1), 2000 * Math.random()],
            [new Date(2004, 1, 1), 2000 * Math.random()],
            [new Date(2005, 1, 1), 2000 * Math.random()],
            [new Date(2006, 1, 1), 2000 * Math.random()],
            [new Date(2007, 1, 1), 2000 * Math.random()],
            [new Date(2008, 1, 1), 2000 * Math.random()],
            [new Date(2009, 1, 1), 2000 * Math.random()],
          ]}
          options={{
            // Use the same chart area width as the control for axis alignment.
            chartArea: { height: '80%', width: '90%' },
            hAxis: { slantedText: false },
            vAxis: { viewWindow: { min: 0, max: 2000 } },
            legend: { position: 'none' },
          }}
          rootProps={{ 'data-testid': '3' }}
          chartPackages={['corechart', 'controls']}
          controls={[
            {
              controlType: 'ChartRangeFilter',
              options: {
                filterColumnIndex: 0,
                ui: {
                  chartType: 'LineChart',
                  chartOptions: {
                    chartArea: { width: '90%', height: '50%' },
                    hAxis: { baselineColor: 'none' },
                  },
                },
              },
              controlPosition: 'bottom',
              controlWrapperParams: {
                state: {
                  range: { start: new Date(1997, 1, 9), end: new Date(2002, 2, 20) },
                },
              },
            },
  ]}
/>
      </div>
    );
  }
}
